import { LocalNotifications } from '@capacitor/local-notifications'
import { Preferences } from '@capacitor/preferences'
import { IconArrow } from '@/shared/icons'

const BASE_URL = `https://i-strong-xr7i.vercel.app/`

interface NotificationConfig {
  id: number
  title: string
  body: string
  url: string
  schedule: { at?: Date; every?: 'day'; count?: number; repeats?: boolean }
  smallIcon: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const adjustNotificationTime = (hours: number, minutes: number): Date => {
  const now = new Date()
  const notificationTime = new Date()
  notificationTime.setHours(hours, minutes, 0, 0)

  if (notificationTime <= now) {
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    notificationTime.setDate(notificationTime.getDate() + 1)
  }
  return notificationTime
}

// –û–±—â–∏–π –º–∞—Å—Å–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
export const notifications: NotificationConfig[] = [
  {
    id: 1,
    title: 'IStrong',
    body: '–ê –æ—Å—å —ñ –Ω–æ–≤–∏–π —á–µ–ª–µ–Ω–¥–∂üî•–©–æ —Ç–∞–º —Ü—ñ–∫–∞–≤–æ–≥–æ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∞ –ö–∞–ø—ñ–±–∞—Ä–∞ —Ü—å–æ–≥–æ —Ä–∞–∑—É?',
    url: `${BASE_URL}/challenges?path=new`,
    schedule: { at: adjustNotificationTime(10, 0), every: 'day', repeats: true }, // 10:00
    smallIcon: 'ic_stat_icon1',
  },
  {
    id: 2,
    title: 'IStrong',
    body: '–ü—Ä–∏–≤—ñ—Ç, —Ç–∏ —è–∫? –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º —Å—Ç–∞–Ω–æ–º –∑ –ö–∞–ø—ñ–±–∞—Ä–æ—é —Ç–∞ –æ—Ç—Ä–∏–º–∞–π –º–æ–Ω–µ—Ç–∫—É.',
    url: `${BASE_URL}/diary`,
    schedule: { at: adjustNotificationTime(9, 0), every: 'day', repeats: true }, // 9:00
    smallIcon: 'ic_stat_icon1',
  },
  {
    id: 3,
    title: 'IStrong',
    body: '–•–µ–π, —è–∫ –ø—Ä–æ–π—à–æ–≤ —Ç–≤—ñ–π –¥–µ–Ω—å? –†–æ–∑–∫–∞–∂–∏ –ö–∞–ø—ñ–±–∞—Ä—ñ - —ñ –º–æ–Ω–µ—Ç–∫–∞ —Ç–≤–æ—è!',
    url: `${BASE_URL}/diary`,
    schedule: { at: adjustNotificationTime(18, 0), every: 'day', repeats: true }, // 18:00
    smallIcon: 'ic_stat_icon1',
  },
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const saveNotificationState = async (key: string, enabled: boolean) => {
  await Preferences.set({ key, value: JSON.stringify(enabled) })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const getNotificationState = async (key: string): Promise<boolean> => {
  const { value } = await Preferences.get({ key })
  return value ? JSON.parse(value) : true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const cancelNotifications = async (ids: number[]) => {
  try {
    await Promise.all(ids.map((id) => LocalNotifications.cancel({ notifications: [{ id }] })))
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const scheduleNotifications = async (enabledNotifications: NotificationConfig[]) => {
  const permissionsGranted = await requestPermissions()
  if (!permissionsGranted) return

  try {
    await LocalNotifications.schedule({
      notifications: enabledNotifications.map((notification) => ({
        title: notification.title,
        body: notification.body,
        id: notification.id,
        schedule: notification.schedule,
        actionTypeId: '',
        extra: { url: notification.url },
        smallIcon: notification.smallIcon,
      })),
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', error)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const toggleNotifications = async (type: 'moodTracker' | 'challenge') => {
  const key =
    type === 'moodTracker' ? 'moodTrackerNotificationsEnabled' : 'challengeNotificationsEnabled'
  const currentState = await getNotificationState(key)
  const newState = !currentState
  await saveNotificationState(key, newState)

  // –í—ã–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const enabledNotifications = notifications.filter((notification) => {
    if (type === 'moodTracker') {
      return notification.id === 2 || notification.id === 3 // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è moodTracker
    } else {
      return notification.id === 1 // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è challenge
    }
  })

  if (newState) {
    await scheduleNotifications(enabledNotifications) // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –ø–ª–∞–Ω–∏—Ä—É–µ–º –∏—Ö
  } else {
    await cancelNotifications(enabledNotifications.map((notification) => notification.id))
  }

  return newState
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
export const requestPermissions = async () => {
  const permission = await LocalNotifications.requestPermissions()
  if (permission.display !== 'granted') {
    console.error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
    return false
  }
  return true
}
